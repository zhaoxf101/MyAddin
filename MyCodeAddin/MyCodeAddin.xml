<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyCodeAddin</name>
    </assembly>
    <members>
        <member name="T:MyCodeAddin.Connect">
            <summary>用于实现外接程序的对象。</summary>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:MyCodeAddin.Connect.#ctor">
            <summary>实现外接程序对象的构造函数。请将您的初始化代码置于此方法内。</summary>
        </member>
        <member name="M:MyCodeAddin.Connect.OnConnection(System.Object,Extensibility.ext_ConnectMode,System.Object,System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnConnection 方法。接收正在加载外接程序的通知。</summary>
            <param term='application'>宿主应用程序的根对象。</param>
            <param term='connectMode'>描述外接程序的加载方式。</param>
            <param term='addInInst'>表示此外接程序的对象。</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:MyCodeAddin.Connect.QueryStatus(System.String,EnvDTE.vsCommandStatusTextWanted,EnvDTE.vsCommandStatus@,System.Object@)">
            <summary>实现 IDTCommandTarget 接口的 QueryStatus 方法。此方法在更新该命令的可用性时调用</summary>
            <param term='commandName'>要确定其状态的命令的名称。</param>
            <param term='neededText'>该命令所需的文本。</param>
            <param term='status'>该命令在用户界面中的状态。</param>
            <param term='commandText'>neededText 参数所要求的文本。</param>
            <seealso class='Exec' />
        </member>
        <member name="M:MyCodeAddin.Connect.Exec(System.String,EnvDTE.vsCommandExecOption,System.Object@,System.Object@,System.Boolean@)">
            <summary>实现 IDTCommandTarget 接口的 Exec 方法。此方法在调用该命令时调用。</summary>
            <param term='commandName'>要执行的命令的名称。</param>
            <param term='executeOption'>描述该命令应如何运行。</param>
            <param term='varIn'>从调用方传递到命令处理程序的参数。</param>
            <param term='varOut'>从命令处理程序传递到调用方的参数。</param>
            <param term='handled'>通知调用方此命令是否已被处理。</param>
            <seealso class='Exec' />
        </member>
        <member name="M:MyCodeAddin.Connect.OnDisconnection(Extensibility.ext_DisconnectMode,System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnDisconnection 方法。接收正在卸载外接程序的通知。</summary>
            <param term='disconnectMode'>描述外接程序的卸载方式。</param>
            <param term='custom'>特定于宿主应用程序的参数数组。</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:MyCodeAddin.Connect.OnAddInsUpdate(System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnAddInsUpdate 方法。当外接程序集合已发生更改时接收通知。</summary>
            <param term='custom'>特定于宿主应用程序的参数数组。</param>
            <seealso class='IDTExtensibility2' />		
        </member>
        <member name="M:MyCodeAddin.Connect.OnStartupComplete(System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnStartupComplete 方法。接收宿主应用程序已完成加载的通知。</summary>
            <param term='custom'>特定于宿主应用程序的参数数组。</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="M:MyCodeAddin.Connect.OnBeginShutdown(System.Array@)">
            <summary>实现 IDTExtensibility2 接口的 OnBeginShutdown 方法。接收正在卸载宿主应用程序的通知。</summary>
            <param term='custom'>特定于宿主应用程序的参数数组。</param>
            <seealso class='IDTExtensibility2' />
        </member>
        <member name="T:MyCodeAddin.TextTemplate1">
            <summary>
            Class to produce the template output
            </summary>
        </member>
        <member name="T:MyCodeAddin.TextTemplate1Base">
            <summary>
            Base class for this transformation
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.Error(System.String)">
            <summary>
            Raise an error
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.Warning(System.String)">
            <summary>
            Raise a warning
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="P:MyCodeAddin.TextTemplate1Base.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:MyCodeAddin.TextTemplate1Base.Errors">
            <summary>
            The error collection for the generation process
            </summary>
        </member>
        <member name="P:MyCodeAddin.TextTemplate1Base.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:MyCodeAddin.TextTemplate1Base.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:MyCodeAddin.TextTemplate1Base.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="P:MyCodeAddin.TextTemplate1Base.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:MyCodeAddin.TextTemplate1Base.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1Base.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:MyCodeAddin.TextTemplate1Base.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1.TransformText">
            <summary>
            Create the template output
            </summary>
        </member>
        <member name="M:MyCodeAddin.TextTemplate1.Initialize">
            <summary>
            Initialize the template
            </summary>
        </member>
        <member name="P:MyCodeAddin.TextTemplate1.model">
            <summary>
            Access the model parameter of the template.
            </summary>
        </member>
        <member name="T:MyCodeAddin.SqlHelper">
            <summary>
            数据库操作辅助类
            </summary>
        </member>
    </members>
</doc>
